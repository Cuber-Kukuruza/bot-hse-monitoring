# Техническая документация для проекта Telegram-бота мониторинга серверов

## Описание проекта
Данный Telegram-бот позволяет пользователям подключать серверы для мониторинга загрузки их CPU и RAM. Пользователи могут устанавливать пороговые значения для этих параметров, получать уведомления при их превышении, а также управлять подключениями через интерфейс бота.

## Основные функции

### Управление серверами
- Добавление сервера: Пользователь вводит IP-адрес, имя пользователя и пароль для подключения по SSH.
- Удаление сервера: Возможность удалить сервер из списка мониторинга.

### Мониторинг нагрузки
- Периодический мониторинг: Проверяет нагрузку CPU и RAM каждые 60 секунд.
- Уведомления: Отправляет уведомления в Telegram, если загрузка превышает заданные пороги.

### Управление порогами
- Пользователь может устанавливать пороговые значения для CPU и RAM.

### Взаимодействие через кнопки
- Интерфейс с использованием Inline-кнопок для навигации и управления.

## Основные модули

### Модуль servers
- Хранит информацию о серверах для каждого чата. Структура:
 
  servers = {
      chat_id: {
          ip: (username, password, ssh_client)
      }
  }
  
### Модуль thresholds
- Хранит пороговые значения для каждого сервера. Структура:
 
  thresholds = {
      ip: (cpu_threshold, ram_threshold)
  }
  
### Функции

#### save_data()
Сохраняет данные о серверах и порогах в файлы servers_data.pkl и thresholds_data.pkl для восстановления после перезапуска.

#### load_data()
Загружает сохраненные данные из файлов и восстанавливает состояние SSH-соединений.

#### execute_ssh_command(ssh_client, command)
Выполняет SSH-команду на сервере и возвращает результат.

#### get_server_load(ssh_client)
Получает текущую загрузку CPU и RAM сервера. Возвращает кортеж из двух значений в процентах.

#### monitor_load(context)
Периодически проверяет нагрузку на серверах и отправляет уведомления при превышении порогов.

#### start(update, context)
Обрабатывает команду /start и отображает список серверов с возможностями управления.

#### button(update, context)
Обрабатывает нажатия кнопок в интерфейсе бота.

#### message_handler(update, context)
Обрабатывает текстовые сообщения от пользователей для добавления новых серверов.

#### main()
Инициализирует приложение, загружает данные, регистрирует обработчики и запускает бота.

## Установка и запуск

1. Установите зависимости:
  
   pip install python-telegram-bot paramiko
   
2. Создайте файл с токеном бота, заменив YOUR_TOKEN:
  
   app = ApplicationBuilder().token("YOUR_TOKEN").build()
   
3. Запустите скрипт:
  
   python bot.py
   
## Пример взаимодействия с ботом

1. Команда /start:
   Бот отображает меню с кнопками "Новое подключение" и списком серверов.

2. Добавление нового сервера:
   Введите данные в формате IP username password.

3. Получение текущей нагрузки:
   Выберите сервер, затем нажмите кнопку "Текущая нагрузка".

4. Установка порога:
   Выберите сервер, затем "Порог CPU" или "Порог RAM" и выберите значение.

5. Удаление сервера:
   Выберите сервер, затем нажмите "Удалить сервер".

## Зависимости
- python-telegram-bot: Для взаимодействия с Telegram API.
- paramiko: Для работы с SSH.
- pickle: Для сохранения данных.
- atexit: Для автоматического сохранения данных перед завершением работы.